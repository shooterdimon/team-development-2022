from typing import Text

import config
import logging
import os
from aiogram.utils.markdown import link
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InputFile
from database import Database
from detector import detect_plants

logging.basicConfig(level=logging.INFO)

bot=Bot(token=config.API_TOKEN)
dp=Dispatcher(bot)

db = Database("db.db")

button = KeyboardButton("–ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑")

keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.add(button)

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
    await message.answer("–í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —è–∫–æ—Å—Ç—ñ –ø–æ—Å—ñ–≤—É –ø–æ–ª—è")

@dp.message_handler(commands=['clear'])
async def clear_photos(message: types.Message):
    images = db.user_photos(message.from_user.id)
    if (bool(len(images))):
        for image in images:
            os.remove(f"images/{image[0]}.jpg")
            if os.path.exists(f"images/_{image[0]}.jpg"):
                os.remove(f"images/_{image[0]}.jpg")
        db.clear_user_photos(message.from_user.id)
    await message.answer("–§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω—ñ ‚úÖ", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(commands=['output'])
async def send_predicted_image(message: types.Message):
    images = db.user_photos(message.from_user.id)
    if (bool(len(images))):
        for image in images:
            if os.path.exists(f"images/_{image[0]}.jpg"):
                img = InputFile(f"images/_{image[0]}.jpg", filename = "result.jpg")
                await message.answer_document(img)
    else:
        await message.answer("–í—ñ–¥—Å—É—Ç–Ω—ñ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ–æ—Ç–æ ‚ùóÔ∏è")

@dp.message_handler(commands=['photos'])
async def get_photos(message: types.Message):
    await message.answer(f"–£—Å—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(db.user_photos(message.from_user.id))} —Ñ–æ—Ç–æ", reply_markup = keyboard)

@dp.message_handler(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑")
async def start_detection(message: types.Message):
    images = db.user_photos(message.from_user.id)

    if (bool(len(images))):
        await message.answer("–§–æ—Ç–æ –ø—Ä–∏–π–Ω—è—Ç—ñ –≤ –æ–±—Ä–æ–±–∫—É üîé", reply_markup=ReplyKeyboardRemove())
        total_rows, total_plants, total_empty = detect_plants(images)
        await message.answer(f"–í–∏—è–≤–ª–µ–Ω–æ {total_rows} —Ä—è–¥—ñ–≤, —Å–µ—Ä–µ–¥ —è–∫–∏—Ö:\n{total_plants} —Ä–æ—Å–ª–∏–Ω —Ç–∞ {total_empty} –ø—É—Å—Ç–∏—Ö –∑–æ–Ω\n–ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –ø–æ—Å—ñ–≤—É = {round(total_plants/(total_plants + total_empty) * 100, 3)} %" + 
        "\n–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ñ–æ—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /output")
    else:
        await message.answer("–§–æ—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚ùóÔ∏è")

@dp.message_handler(content_types=['photo'])
async def handle_photo(message):
    file_id = message.photo[-1].file_id
    file_unique_id = message.photo[-1].file_unique_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, "images/" + file_unique_id + ".jpg")
    if not db.user_photo_exists(message.from_user.id, file_unique_id):
        db.add_photo(message.from_user.id, file_unique_id)
        await message.answer(f"–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ\n–£—Å—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(db.user_photos(message.from_user.id))} —Ñ–æ—Ç–æ", reply_markup = keyboard)
    else:
        await message.answer("–§–æ—Ç–æ –≤–∂–µ —ñ—Å–Ω—É—î ‚ùóÔ∏è", reply_markup = keyboard)


@dp.message_handler(content_types=['document'])
async def handle_docs_photo(message):
    if message.document.mime_type.startswith("image"):
        file_id = message.document.file_id
        file_unique_id = message.document.file_unique_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "images/" + file_unique_id + ".jpg")
        db.add_photo(message.from_user.id, file_unique_id)
        await message.answer(f"–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ\n–£—Å—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(db.user_photos(message.from_user.id))} —Ñ–æ—Ç–æ", reply_markup = keyboard)
    else:
        await message.answer("–§–æ—Ç–æ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ ‚ùóÔ∏è", reply_markup = keyboard)

if __name__ == '__main__':

	executor.start_polling(dp, skip_updates=True)